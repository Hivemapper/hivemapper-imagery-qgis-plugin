# -*- coding: utf-8 -*-

"""
/***************************************************************************
 HivemapperImagery
                                 A QGIS plugin
 This plugin fetches the latest imagery from the Hivemapper network
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-24
        copyright            : (C) 2024 by Hivemapper
        email                : hi@hivemapper.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Hivemapper'
__date__ = '2024-10-24'
__copyright__ = '(C) 2024 by Hivemapper'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect

from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtGui import QIcon

from qgis.core import QgsProcessingAlgorithm, QgsApplication
import processing

from .hivemapper_imagery_provider import HivemapperImageryProvider

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)


class HivemapperImageryPlugin(object):

    def __init__(self, iface):
        self.provider = None
        self.iface = iface

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = HivemapperImageryProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        """ Add actions to the GUI for both algorithms """
        self.initProcessing()

        # Define the icon for the toolbar
        cmd_folder = os.path.dirname(__file__)
        icon_path = os.path.join(cmd_folder, 'logo.png')
        icon = QIcon(icon_path)

        # Action for "Fetch Imagery" algorithm
        self.fetch_imagery_action = QAction(icon, "Fetch Imagery", self.iface.mainWindow())
        self.fetch_imagery_action.triggered.connect(self.runFetchImagery)
        self.iface.addPluginToMenu("&Hivemapper", self.fetch_imagery_action)
        self.iface.addToolBarIcon(self.fetch_imagery_action)

        # Action for "Create Bursts" algorithm
        self.create_bursts_action = QAction(icon, "Create Bursts", self.iface.mainWindow())
        self.create_bursts_action.triggered.connect(self.runCreateBursts)
        self.iface.addPluginToMenu("&Hivemapper", self.create_bursts_action)
        self.iface.addToolBarIcon(self.create_bursts_action)

    def unload(self):
        """ Remove actions and provider when the plugin is unloaded """
        if self.fetch_imagery_action:
            self.iface.removePluginMenu("&Hivemapper", self.fetch_imagery_action)
            self.iface.removeToolBarIcon(self.fetch_imagery_action)
        if self.create_bursts_action:
            self.iface.removePluginMenu("&Hivemapper", self.create_bursts_action)
            self.iface.removeToolBarIcon(self.create_bursts_action)
        QgsApplication.processingRegistry().removeProvider(self.provider)

    def runFetchImagery(self):
        """ Run the Fetch Imagery algorithm """
        self.iface.runAlgorithmDialog("Hivemapper:fetch_imagery")

    def runCreateBursts(self):
        """ Run the Create Bursts algorithm """
        self.iface.runAlgorithmDialog("Hivemapper:create_bursts")